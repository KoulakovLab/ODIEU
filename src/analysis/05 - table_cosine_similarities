#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 12 09:35:12 2025

@author: cyrille
"""
import sys

import numpy as np
import pandas as pd
import scipy.io
from sklearn.metrics.pairwise import paired_distances
from tqdm import tqdm


description_types = list(pd.read_csv("description_types.csv", names=["Labels"])['Labels'])
contenders = pd.read_pickle("descriptions.pkl")

model = "all-MiniLM-L12-v1"
model_paths: list[list[str]] = [[model + f"/sbert_init" for _ in range(5)], [model + f"/sbert_best_left_{fold+1}" for fold in range(5)]]
model_names: list[list[str]] = [[path.replace("/", ".") for path in list_paths] for list_paths in model_paths]
for i_model in range(len(model_paths)):
    mean_perfs_ordd = {dataset_name: list() for dataset_name in description_types[1:]}
    mean_perfs_shuf = {dataset_name: list() for dataset_name in description_types[1:]}
    perfs_ordd = {dataset_name: [list() for _ in range(5)] for dataset_name in description_types[1:]}
    perfs_shuf = {dataset_name: [list() for _ in range(5)] for dataset_name in description_types[1:]}
    for fold in range(5):
        model_path = model_paths[i_model][fold]
        model_name = model_names[i_model][fold]
        embeddings = pd.read_pickle(f"cosine_embeddings_{model_name}_fold_{fold+1}.pkl")
        for contender_id, contender_name in enumerate(contenders.columns[1:]):
            coss_ordd = (1. - paired_distances(embeddings[contender_name][0], embeddings[contender_name][1], metric="cosine"))
            coss_shuf = (1. - paired_distances(embeddings[contender_name][0], embeddings[contender_name][2], metric="cosine"))
            perfs_ordd[contender_name][fold] = coss_ordd
            perfs_shuf[contender_name][fold] = coss_shuf
            mean_perfs_ordd[contender_name].extend(coss_ordd)
            mean_perfs_shuf[contender_name].extend(coss_shuf)
    a = {name: [np.array(mean_perfs_ordd[name])[rng.choice(len(mean_perfs_ordd[name]), len(mean_perfs_ordd[name]))] for _ in range(10)] for name in description_types[1:]}
    b = {name: [np.array(mean_perfs_shuf[name])[rng.choice(len(mean_perfs_shuf[name]), len(mean_perfs_shuf[name]))] for _ in range(10)] for name in description_types[1:]}
    data=[[np.mean(a[name]) for name in description_types[1:]],
          [np.std(a[name])/np.sqrt(len(a[name])) for name in description_types[1:]],
          [np.mean(b[name]) for name in description_types[1:]],
          [np.std(b[name])/np.sqrt(len(b[name])) for name in description_types[1:]]]
    df = pd.DataFrame(data, columns=description_types[1:], index=["Average ordered", "STD ordered", "Average shuffled", "STD shuffled"])
    print(df)
    df.to_csv(f"table_mean_cosines_{model_names[i_model][0]}.csv")
    
    save_name = model_names[i_model][0] if model_names[i_model][0].find("init") else model_names[i_model][0][:-2]
    table_cosines.to_csv(f"table_cosines_{save_name}.csv")
    pd.to_pickle(table_cosines, f"table_cosines_{save_name}.pkl")
    scipy.io.savemat(f"table_cosines_{save_name}.mat", table_cosines)
    table_mean_cosines.to_csv(f"table_mean_cosines_{save_name}.csv")
    pd.to_pickle(table_mean_cosines, f"table_mean_cosines_{save_name}.pkl")
    scipy.io.savemat(f"table_mean_cosines_{save_name}.mat", table_mean_cosines)

for i_model in tqdm(range(len(model_paths))):
    mean_perfs_ordd = {dataset_name: list() for dataset_name in description_types[1:]}
    mean_perfs_shuf = {dataset_name: list() for dataset_name in description_types[1:]}
    perfs_ordd = {dataset_name: [list() for _ in range(5)] for dataset_name in description_types[1:]}
    perfs_shuf = {dataset_name: [list() for _ in range(5)] for dataset_name in description_types[1:]}
    for fold in tqdm(range(5)):
        model_path = model_paths[i_model][fold]
        model_name = model_names[i_model][fold]
        embeddings = pd.read_pickle(f"cosine_embeddings_symmetric_{model_name}_fold_{fold+1}.pkl")
        for contender_id, contender_name in enumerate(contenders.columns[1:]):
            coss_ordd = (1. - paired_distances(embeddings[contender_name][0], embeddings[contender_name][1], metric="cosine"))
            coss_shuf = (1. - paired_distances(embeddings[contender_name][0], embeddings[contender_name][2], metric="cosine"))
            perfs_ordd[contender_name][fold] = coss_ordd
            perfs_shuf[contender_name][fold] = coss_shuf
            mean_perfs_ordd[contender_name].append(coss_ordd.mean())
            mean_perfs_shuf[contender_name].append(coss_shuf.mean())

    table_cosines = pd.DataFrame(data=[perfs_ordd[name] for name in description_types[1:]],
                                       index=description_types[1:], columns=[fold+1 for fold in range(5)])
    table_mean_cosines = pd.DataFrame(data=[[np.mean(mean_perfs_ordd[name]) for name in description_types[1:]], [np.std(mean_perfs_ordd[name])/np.sqrt(len(mean_perfs_ordd[name])) for name in description_types[1:]],
                                            [np.mean(mean_perfs_shuf[name]) for name in description_types[1:]], [np.std(mean_perfs_shuf[name])/np.sqrt(len(mean_perfs_shuf[name])) for name in description_types[1:]]],
                                      columns=description_types[1:], index=["Average ordered", "STD ordered", "Average shuffled", "STD shuffled"])
    
    save_name = model_names[i_model][0] if model_names[i_model][0].find("init") else model_names[i_model][0][:-2]
    table_cosines.to_csv(f"table_cosines_symmetric_{save_name}.csv")
    pd.to_pickle(table_cosines, f"table_cosines_symmetric_{save_name}.pkl")
    scipy.io.savemat(f"table_cosines_symmetric_{save_name}.mat", table_cosines)
    table_mean_cosines.to_csv(f"table_mean_cosines_symmetric_{save_name}.csv")
    pd.to_pickle(table_mean_cosines, f"table_mean_cosines_symmetric_{save_name}.pkl")
    scipy.io.savemat(f"table_mean_cosines_symmetric_{save_name}.mat", table_mean_cosines)




